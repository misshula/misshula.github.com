<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: HAProxy | Divisa C]]></title>
  <link href="http://misshula.github.com/blog/categories/haproxy/atom.xml" rel="self"/>
  <link href="http://misshula.github.com/"/>
  <updated>2013-03-05T15:38:15-05:00</updated>
  <id>http://misshula.github.com/</id>
  <author>
    <name><![CDATA[David Misshula]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Configure HAProxy to Scale Socket.io Node.js Apps with SSL]]></title>
    <link href="http://misshula.github.com/blog/2013/02/04/configure-haproxy-to-scale-multiple-nodes-with-stickiness-and-ssl/"/>
    <updated>2013-02-04T12:18:00-05:00</updated>
    <id>http://misshula.github.com/blog/2013/02/04/configure-haproxy-to-scale-multiple-nodes-with-stickiness-and-ssl</id>
    <content type="html"><![CDATA[<p>I like to build things. I figured this out when I was young and asked to build a Roman aqueduct out of cardboard and toilet paper rolls for a school project. Not only did I succeed in my first engineering project, but I remember tweaking it all week to ensure it never leaked and looked great too.</p>

<p>My most recent aqueduct wasn’t such - but rather - a multi-node socket.io node.js application at <a href="http://understoodit.com">Understoodit</a>.</p>

<p>I learned how-to:
<strong>
<li> configure HAProxy with socket.io node.js servers</li>
<li> add SSL to HAProxy</li>
<li> scale socket.io with multiple nodes</li>
</strong></p>

<p>It’s easy to build an application that runs - but can you make it scale? It’s not good enough to beef up your application server - it needs to scale horizontally. So, here’s how I went about my business.</p>

<p><strong>1. Start with one-to-one:</strong></p>

<p><img src="http://misshula.github.com/images/1.png"></p>

<p>This should be pretty straight forward. If you're on Amazon, or any other cloud offering, you can move on. The only tricky part should be opening up the right port to the public.</p>

<p><strong>2. Add a load balancer</strong></p>

<p>A load balancer is a way to distribute workload across multiple servers. We use <a href="http://haproxy.1wt.eu/">HAProxy</a>, an open source, fast proxy server. It’s free, it’s flexible, it's a topic of discussion online, and (most importantly) it just works! See <a href="http://haproxy.1wt.eu/download/1.4/doc/configuration.txt">documentation</a>.</p>

<p><img src="http://misshula.github.com/images/2.png"></p>

<p>Once you install HAProxy - you need to run your haproxy.cfg file. Here is an example haproxy.cfg I used to get it up and running:
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>global
</span><span class='line'>    maxconn     4096 
</span><span class='line'>    nbproc      1
</span><span class='line'>    #debug
</span><span class='line'>    daemon
</span><span class='line'>    log         127.0.0.1   local0
</span><span class='line'>
</span><span class='line'>defaults
</span><span class='line'>    mode        http
</span><span class='line'>    option      httplog
</span><span class='line'>    log         global
</span><span class='line'>
</span><span class='line'>frontend unsecured *:80
</span><span class='line'>    timeout     client      86400000
</span><span class='line'>    mode        http
</span><span class='line'>    option      httpclose
</span><span class='line'>    option      forwardfor  #forward’s clients IP to app
</span><span class='line'>    default_backend         www_backend
</span><span class='line'>
</span><span class='line'>backend www_backend
</span><span class='line'>    mode        http
</span><span class='line'>    option      forwardfor  #this sets X-Forwarded-For
</span><span class='line'>    timeout     server      30000
</span><span class='line'>    timeout     connect     4000
</span><span class='line'>    server      server1     localhost:8001 weight 1 maxconn 1024 check
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Nothing crazy here. Some things to keep note of:</p>

<ul>
<li>Uncomment the <code>debug</code> statement on line 4 to help you get going.</li>
<li>Notice the front end called “unsecured” (line 13) is binding to port 80 (the standard open web server port). Ensure you can access your server on this port.</li>
<li>Notice when the connection to the LB is made, it will connect to our default backend (line 20) called “www_backend”. Our default backend is our node.js server running on port 8001 (seen on line 25) of our local machine.</li>
</ul>


<p><strong>3. Add an SSL certificate!</strong></p>

<p><img src="http://misshula.github.com/images/3.png"></p>

<p>Should be easy right? Well, with the release of HAProxy Development 1.5-dev17
it is A LOT easier. Before, I was using <a href="http://devblog.bu.mp/introducing-stud">Stud with HAProxy</a>. It worked, but it was another process I had to keep track of. Also, it would never forward my client’s IP. If your into masochism - give it a shot. Or, just use the new version of HAProxy.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>global
</span><span class='line'>    maxconn     4096 
</span><span class='line'>    nbproc      1
</span><span class='line'>    #debug
</span><span class='line'>    daemon
</span><span class='line'>    log         127.0.0.1    local0
</span><span class='line'>
</span><span class='line'>defaults
</span><span class='line'>    mode        http
</span><span class='line'>    option      httplog
</span><span class='line'>    log         global
</span><span class='line'>
</span><span class='line'>frontend unsecured *:80
</span><span class='line'>    timeout     client 86400000
</span><span class='line'>    redirect    prefix https://yoursite.com code 301 
</span><span class='line'>
</span><span class='line'>frontend  secured
</span><span class='line'>    timeout     client 86400000
</span><span class='line'>    mode        http
</span><span class='line'>    option      httpclose
</span><span class='line'>    option      forwardfor
</span><span class='line'>    bind        0.0.0.0:443 ssl crt /etc/haproxy/yourcert.pem
</span><span class='line'>    default_backend      www_backend
</span><span class='line'>
</span><span class='line'>backend www_backend
</span><span class='line'>    mode        http
</span><span class='line'>    option      forwardfor # This sets X-Forwarded-For
</span><span class='line'>    timeout     server 30000
</span><span class='line'>    timeout     connect 4000
</span><span class='line'>    server      server1 localhost:8001 weight 1 maxconn 1024 check
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>A couple additional things here:</p>

<ul>
<li>I have two frontends binding to two ports 80 and 443 - unsecure (line 13) and secure (line 17 &amp; 22) respectively.</li>
<li>When a client connects on the 80 port, they are redirected to the secure 443 port.</li>
<li>The statement <code>bind 0.0.0.0:443 ssl crt /etc/haproxy/yourcert.pem</code> (line 22) connects the client to HAProxy using SSL. HAProxy will then process SSL and connect to the server. SSL is a new feature of HAProxy, if you want more details on creating your .pem file - contact me directly - it can be a pain!</li>
<li>Try this out - if you see a green lock like this <img src="http://misshula.github.com/images/greenlock.png"> in chrome - success!</li>
</ul>


<p><strong>4. Now, let’s get interesting - scale it!</strong></p>

<p><img src="http://misshula.github.com/images/4.png"></p>

<p>The important thing with multiple socket.io servers is that we need socket.io to maintain our user's state. We are using socket.io's xhr-polling transport mechanism. When using xhr-polling, a socket.io process will consider a client disconnected if it doesn't hear back. So, if we have two socket.io processes, it is important that all xhr-polling for one client is always directed to the same socket.io process. HAProxy helps ensure this by maintaining our user’s stickiness and manipulating our user's cookie.
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>global
</span><span class='line'>    maxconn     4096 
</span><span class='line'>    nbproc      1
</span><span class='line'>    #debug
</span><span class='line'>    daemon
</span><span class='line'>    log         127.0.0.1    local0
</span><span class='line'>
</span><span class='line'>defaults
</span><span class='line'>    mode        http
</span><span class='line'>    option      httplog
</span><span class='line'>    log         global
</span><span class='line'>
</span><span class='line'>frontend unsecured *:80
</span><span class='line'>    timeout     client 86400000
</span><span class='line'>    redirect    prefix https://yoursite.com code 301 
</span><span class='line'>
</span><span class='line'>frontend  secured
</span><span class='line'>    timeout     client 86400000
</span><span class='line'>    mode        http
</span><span class='line'>    option      httpclose
</span><span class='line'>    option      forwardfor
</span><span class='line'>    bind        0.0.0.0:443 ssl crt /etc/haproxy/yourcert.pem
</span><span class='line'>    default_backend      www_backend
</span><span class='line'>
</span><span class='line'>backend www_backend
</span><span class='line'>    mode        http
</span><span class='line'>    balance     roundrobin
</span><span class='line'>    cookie      SERVERID insert indirect nocache
</span><span class='line'>    option      forwardfor
</span><span class='line'>    timeout     server 30000
</span><span class='line'>    timeout     connect 4000
</span><span class='line'>    server      server1 localhost:8001 cookie server1 weight 1 maxconn 1024 check
</span><span class='line'>    server      server2 localhost:8002 cookie server2 weight 1 maxconn 1024 check
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>There are a couple differences to the HAProxy backend in the config file.</p>

<ul>
<li>We first have to add <code>balance roundrobin</code>. <a href="http://wiki.joyent.com/wiki/display/jpc2/Load+Balancing+with+HAproxy#LoadBalancingwithHAproxy-RoundRobin">Round Robin</a> rotates requests among backend servers and also accepts a weight parameter which specifies their relative weight.</li>
<li>Next we must add the <code>cookie SERVERID insert indirect nocache</code> statement. This tells HAProxy to add a new parameter called SERVERID to our user’s cookie. This line is integral for ensuring that our user "sticks" to the same socket.io process - which inturn maintains our user's state.</li>
<li>Our <a href="http://blog.killtheradio.net/technology/haproxys-keep-alive-functionality-and-how-it-can-speed-up-your-site/">keep-alive</a> functionality (line 18) gives us a speed boost by maintianing our clients connection open to the web server.</li>
<li>The only other thing we need to add is our second server and give both of our servers a cookie name. As seen in line 32 &amp; 33 of the .cfg.</li>
</ul>


<p><strong>5. Test it!</strong></p>

<p>Now, how do we know when our load balancer is actually working? Using Google Chrome’s developer tools, in the network tab, click on our latest GET request. From there, click on “Headers”. In the headers you will see your cookie. Within the cookie you should see a cookie parameter called SERVERID= (look familiar?)</p>

<p><img src="http://misshula.github.com/images/cookie.png"></p>

<p>This is HAProxy marking which which socket.io process it should route your requests to. Want to test the roundrobin-ing? Change the weight of your servers, clear your cache, and try and see what you get for SERVERID.</p>

<p>Once you have demonstrated you can scale two app severs, scaling out horizontally is a snap. Keep running more nodes - and keep letting HAProxy know where they live!</p>

<p>Funny enough, there are more similarities between Aqueducts and HAProxy than I originally thought!</p>

<p>Some other HAProxy links:</p>

<ul>
<li><a href="http://wiki.joyent.com/wiki/display/jpc2/Load+Balancing+with+HAproxy">HAProxy on Joyent</a></li>
<li><a href="http://blog.exceliance.fr/2012/09/10/how-to-get-ssl-with-haproxy-getting-rid-of-stunnel-stud-nginx-or-pound/">HAProxy and SSL from Exceliance</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
