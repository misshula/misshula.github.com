<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Divisa C]]></title>
  <link href="http://misshula.github.com/atom.xml" rel="self"/>
  <link href="http://misshula.github.com/"/>
  <updated>2013-03-05T15:45:16-05:00</updated>
  <id>http://misshula.github.com/</id>
  <author>
    <name><![CDATA[David Misshula]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Node.js meetup]]></title>
    <link href="http://misshula.github.com/blog/2013/03/05/nodejs-meetup/"/>
    <updated>2013-03-05T15:16:00-05:00</updated>
    <id>http://misshula.github.com/blog/2013/03/05/nodejs-meetup</id>
    <content type="html"><![CDATA[<p>Last week I had the pleasure of presenting at Toronto&#8217;s NodeJS meetup on cloud services for hosting your node.js application.</p>

<p>I based this talk based on the experience that I have had at Understoodit and our trial of Joyent but eventual switch to Amazon EC2.</p>

<p>The discussion that we had was great! Thank you for all that came out.</p>

<p>I wanted to post the slides that I used for anyone&#8217;s interest. As well, here are some of the useful links.</p>

<p>I also came across this new node.js hosting platform <a href="https://modulus.io/">Modulus</a>. I&#8217;m interested to know if anyone has used it yet?</p>

<p><strong>Links in Presentation</strong></p>

<p><a href="http://joyent.com/products/joyent-cloud/pricing-comparison">http://joyent.com/products/joyent-cloud/pricing-comparison</a></p>

<p><a href="http://joyent.com/products/joyent-cloud/aws-comparison">http://joyent.com/products/joyent-cloud/aws-comparison</a></p>

<p><a href="http://aws.amazon.com/free/">http://aws.amazon.com/free/</a></p>

<p><a href="http://jasonormand.com/2013/02/08/linode-vs-digitalocean-performance-benchmarks/">http://jasonormand.com/2013/02/08/linode-vs-digitalocean-performance-benchmarks/ </a></p>

<p><a href="http://mattconnolly.wordpress.com/2012/11/18/comparing-amazon-ec2-to-joyent-smartos/ ">http://mattconnolly.wordpress.com/2012/11/18/comparing-amazon-ec2-to-joyent-smartos/ </a></p>

<p><a href="http://news.ycombinator.com/item?id=4802957">http://news.ycombinator.com/item?id=4802957</a></p>

<p><a href="http://joyent.com/content/05-developers/01-resources/43-a-framework-for-selecting-the-right-cloud-infrastructure-provider/121204-aws-whitepaper.pdf">http://joyent.com/content/05-developers/01-resources/43-a-framework-for-selecting-the-right-cloud-infrastructure-provider/121204-aws-whitepaper.pdf</a></p>

<p><a href="http://misshula.github.com/images/nodejs.pdf"><strong>Presentation</strong></a></p>

<iframe src="http://docs.google.com/gview?url=http://blog.davidmisshula.com/images/nodejs.pdf&embedded=true" 
style="width:600px; height:500px;" frameborder="0"></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Three Months In - Am I An Entrepreneur Yet?]]></title>
    <link href="http://misshula.github.com/blog/2013/02/12/am-i-an-entrepreneur-yet/"/>
    <updated>2013-02-12T13:47:00-05:00</updated>
    <id>http://misshula.github.com/blog/2013/02/12/am-i-an-entrepreneur-yet</id>
    <content type="html"><![CDATA[<p>When I was young, I remember asking my dad  - “what is an Entrepreneur?” Quickly, he responded - “it’s someone without a job, son.”</p>

<p>Well, it’s been three months since ‘having a job’ and these are some of the things I’ve learned.</p>

<h3>You have a job</h3>


<p>Despite what other people want to tell you - you have work to do. You actually DO stuff. You often work a lot. I’d entertain the fact that my hours are more flexible, but just because I’m doing yoga on a Tuesday morning - doesn’t mean I’m not up until 2am on a Thursday - working.
I originally thought that I’d be working every hour of everyday, to ensure success for my company. But, that’s truly not the case. When things need to get done, I ensure that they do - but, taking a break and letting your brain relax is often the best thing for my productivity. It is extremely important that you don’t pretend to work when you are not. It is okay to not be working all the time - in fact, I encourage it. Turns out, when you step away from work you often unconsciously solve problems you have been wrestling with.</p>

<h3>You have a boss</h3>


<p>It’s you - and that person should be the toughest critic you’ve worked for. It’s not good enough to be just satisfied with something you create. You must be proud of what you do, and you shouldn’t stop until you are. But often, you can’t always be your biggest motivator. Set up goals with your teammates and take time for some constructive criticism along the way. Do things with a purpose and the rest will fall into place.</p>

<h3>You have to be creative</h3>


<p>You finally get to ‘put your money where your mouth is.’ You have to sharpen your skills and show what you’ve got. Too many times, I said ‘cool’ or ‘motivating’ things in interviews, or with people - but could always fall back on the fact I had a job to tie me up. Now, I have a passion that needs to be relayed in my words and represented in my actions. You don’t get handed the silver platter (or paper plate) very often - so make a meal fit for a king.</p>

<h3>You have to make real decisions</h3>


<p>Every decision you make is critical. This should not scare you, but encourage you even further. Every decision you make sculpts who you are and what your business is. When you own your own business - each decision means much more. Sculpt with a chisel and not a brush.</p>

<h3>You have to enjoy the ride</h3>


<p>Sure, there is some stress and a few road bumps along the way - but, it’s important to enjoy the ups and the downs. Yes, enjoy the downs. You learn from the downs and it helps balance the ups. If each day you learn something new, and every day is based on how wise you are - then, every day should get better. It can be a financial burden to start your own shop, but I often tell myself, “some people save for traveling, some people save for school, I saved for starting a business.” And I’m okay with it. We may not be buying yachts, but we are progressing each day, as business owners and more importantly - as people. I’m learning how the world works without the superficial, financial safety blanket that my generation grows up with.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Configure HAProxy to Scale Socket.io Node.js Apps with SSL]]></title>
    <link href="http://misshula.github.com/blog/2013/02/04/configure-haproxy-to-scale-multiple-nodes-with-stickiness-and-ssl/"/>
    <updated>2013-02-04T12:18:00-05:00</updated>
    <id>http://misshula.github.com/blog/2013/02/04/configure-haproxy-to-scale-multiple-nodes-with-stickiness-and-ssl</id>
    <content type="html"><![CDATA[<p>I like to build things. I figured this out when I was young and asked to build a Roman aqueduct out of cardboard and toilet paper rolls for a school project. Not only did I succeed in my first engineering project, but I remember tweaking it all week to ensure it never leaked and looked great too.</p>

<p>My most recent aqueduct wasn’t such - but rather - a multi-node socket.io node.js application at <a href="http://understoodit.com">Understoodit</a>.</p>

<p>I learned how-to:
<strong>
<li> configure HAProxy with socket.io node.js servers</li>
<li> add SSL to HAProxy</li>
<li> scale socket.io with multiple nodes</li>
</strong></p>

<p>It’s easy to build an application that runs - but can you make it scale? It’s not good enough to beef up your application server - it needs to scale horizontally. So, here’s how I went about my business.</p>

<p><strong>1. Start with one-to-one:</strong></p>

<p><img src="http://misshula.github.com/images/1.png"></p>

<p>This should be pretty straight forward. If you&#8217;re on Amazon, or any other cloud offering, you can move on. The only tricky part should be opening up the right port to the public.</p>

<p><strong>2. Add a load balancer</strong></p>

<p>A load balancer is a way to distribute workload across multiple servers. We use <a href="http://haproxy.1wt.eu/">HAProxy</a>, an open source, fast proxy server. It’s free, it’s flexible, it&#8217;s a topic of discussion online, and (most importantly) it just works! See <a href="http://haproxy.1wt.eu/download/1.4/doc/configuration.txt">documentation</a>.</p>

<p><img src="http://misshula.github.com/images/2.png"></p>

<p>Once you install HAProxy - you need to run your haproxy.cfg file. Here is an example haproxy.cfg I used to get it up and running:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>global
</span><span class='line'>      maxconn     4096 
</span><span class='line'>      nbproc      1
</span><span class='line'>      #debug
</span><span class='line'>      daemon
</span><span class='line'>      log         127.0.0.1   local0
</span><span class='line'>
</span><span class='line'>  defaults
</span><span class='line'>      mode        http
</span><span class='line'>      option      httplog
</span><span class='line'>      log         global
</span><span class='line'>    
</span><span class='line'>  frontend unsecured *:80
</span><span class='line'>      timeout     client      86400000
</span><span class='line'>      mode        http
</span><span class='line'>      option      httpclose
</span><span class='line'>      option      forwardfor  #forward’s clients IP to app
</span><span class='line'>      default_backend         www_backend
</span><span class='line'>
</span><span class='line'>  backend www_backend
</span><span class='line'>      mode        http
</span><span class='line'>      option      forwardfor  #this sets X-Forwarded-For
</span><span class='line'>      timeout     server      30000
</span><span class='line'>      timeout     connect     4000
</span><span class='line'>      server      server1     localhost:8001 weight 1 maxconn 1024 check</span></code></pre></td></tr></table></div></figure>


<p>Nothing crazy here. Some things to keep note of:</p>

<ul>
<li>Uncomment the <code>debug</code> statement on line 4 to help you get going.</li>
<li>Notice the front end called “unsecured” (line 13) is binding to port 80 (the standard open web server port). Ensure you can access your server on this port.</li>
<li>Notice when the connection to the LB is made, it will connect to our default backend (line 20) called “www_backend”. Our default backend is our node.js server running on port 8001 (seen on line 25) of our local machine.</li>
</ul>


<p><strong>3. Add an SSL certificate!</strong></p>

<p><img src="http://misshula.github.com/images/3.png"></p>

<p>Should be easy right? Well, with the release of HAProxy Development 1.5-dev17
it is A LOT easier. Before, I was using <a href="http://devblog.bu.mp/introducing-stud">Stud with HAProxy</a>. It worked, but it was another process I had to keep track of. Also, it would never forward my client’s IP. If your into masochism - give it a shot. Or, just use the new version of HAProxy.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>global
</span><span class='line'>      maxconn     4096 
</span><span class='line'>      nbproc      1
</span><span class='line'>      #debug
</span><span class='line'>      daemon
</span><span class='line'>      log         127.0.0.1    local0
</span><span class='line'>
</span><span class='line'>  defaults
</span><span class='line'>      mode        http
</span><span class='line'>      option      httplog
</span><span class='line'>      log         global
</span><span class='line'>
</span><span class='line'>  frontend unsecured *:80
</span><span class='line'>      timeout     client 86400000
</span><span class='line'>      redirect    prefix https://yoursite.com code 301 
</span><span class='line'>
</span><span class='line'>  frontend  secured
</span><span class='line'>      timeout     client 86400000
</span><span class='line'>      mode        http
</span><span class='line'>      option      httpclose
</span><span class='line'>      option      forwardfor
</span><span class='line'>      bind        0.0.0.0:443 ssl crt /etc/haproxy/yourcert.pem
</span><span class='line'>      default_backend      www_backend
</span><span class='line'>
</span><span class='line'>  backend www_backend
</span><span class='line'>      mode        http
</span><span class='line'>      option      forwardfor # This sets X-Forwarded-For
</span><span class='line'>      timeout     server 30000
</span><span class='line'>      timeout     connect 4000
</span><span class='line'>      server      server1 localhost:8001 weight 1 maxconn 1024 check</span></code></pre></td></tr></table></div></figure>


<p>A couple additional things here:</p>

<ul>
<li>I have two frontends binding to two ports 80 and 443 - unsecure (line 13) and secure (line 17 &amp; 22) respectively.</li>
<li>When a client connects on the 80 port, they are redirected to the secure 443 port.</li>
<li>The statement <code>bind 0.0.0.0:443 ssl crt /etc/haproxy/yourcert.pem</code> (line 22) connects the client to HAProxy using SSL. HAProxy will then process SSL and connect to the server. SSL is a new feature of HAProxy, if you want more details on creating your .pem file - contact me directly - it can be a pain!</li>
<li>Try this out - if you see a green lock like this <img src="http://misshula.github.com/images/greenlock.png"> in chrome - success!</li>
</ul>


<p><strong>4. Now, let’s get interesting - scale it!</strong></p>

<p><img src="http://misshula.github.com/images/4.png"></p>

<p>The important thing with multiple socket.io servers is that we need socket.io to maintain our user&#8217;s state. We are using socket.io&#8217;s xhr-polling transport mechanism. When using xhr-polling, a socket.io process will consider a client disconnected if it doesn&#8217;t hear back. So, if we have two socket.io processes, it is important that all xhr-polling for one client is always directed to the same socket.io process. HAProxy helps ensure this by maintaining our user’s stickiness and manipulating our user&#8217;s cookie.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>global
</span><span class='line'>      maxconn     4096 
</span><span class='line'>      nbproc      1
</span><span class='line'>      #debug
</span><span class='line'>      daemon
</span><span class='line'>      log         127.0.0.1    local0
</span><span class='line'>
</span><span class='line'>  defaults
</span><span class='line'>      mode        http
</span><span class='line'>      option      httplog
</span><span class='line'>      log         global
</span><span class='line'>
</span><span class='line'>  frontend unsecured *:80
</span><span class='line'>      timeout     client 86400000
</span><span class='line'>      redirect    prefix https://yoursite.com code 301 
</span><span class='line'>
</span><span class='line'>  frontend  secured
</span><span class='line'>      timeout     client 86400000
</span><span class='line'>      mode        http
</span><span class='line'>      option      httpclose
</span><span class='line'>      option      forwardfor
</span><span class='line'>      bind        0.0.0.0:443 ssl crt /etc/haproxy/yourcert.pem
</span><span class='line'>      default_backend      www_backend
</span><span class='line'>
</span><span class='line'>  backend www_backend
</span><span class='line'>      mode        http
</span><span class='line'>      balance     roundrobin
</span><span class='line'>      cookie      SERVERID insert indirect nocache
</span><span class='line'>      option      forwardfor
</span><span class='line'>      timeout     server 30000
</span><span class='line'>      timeout     connect 4000
</span><span class='line'>      server      server1 localhost:8001 cookie server1 weight 1 maxconn 1024 check
</span><span class='line'>      server      server2 localhost:8002 cookie server2 weight 1 maxconn 1024 check</span></code></pre></td></tr></table></div></figure>


<p>There are a couple differences to the HAProxy backend in the config file.</p>

<ul>
<li>We first have to add <code>balance roundrobin</code>. <a href="http://wiki.joyent.com/wiki/display/jpc2/Load+Balancing+with+HAproxy#LoadBalancingwithHAproxy-RoundRobin">Round Robin</a> rotates requests among backend servers and also accepts a weight parameter which specifies their relative weight.</li>
<li>Next we must add the <code>cookie SERVERID insert indirect nocache</code> statement. This tells HAProxy to add a new parameter called SERVERID to our user’s cookie. This line is integral for ensuring that our user &#8220;sticks&#8221; to the same socket.io process - which inturn maintains our user&#8217;s state.</li>
<li>Our <a href="http://blog.killtheradio.net/technology/haproxys-keep-alive-functionality-and-how-it-can-speed-up-your-site/">keep-alive</a> functionality (line 18) gives us a speed boost by maintianing our clients connection open to the web server.</li>
<li>The only other thing we need to add is our second server and give both of our servers a cookie name. As seen in line 32 &amp; 33 of the .cfg.</li>
</ul>


<p><strong>5. Test it!</strong></p>

<p>Now, how do we know when our load balancer is actually working? Using Google Chrome’s developer tools, in the network tab, click on our latest GET request. From there, click on “Headers”. In the headers you will see your cookie. Within the cookie you should see a cookie parameter called SERVERID= (look familiar?)</p>

<p><img src="http://misshula.github.com/images/cookie.png"></p>

<p>This is HAProxy marking which which socket.io process it should route your requests to. Want to test the roundrobin-ing? Change the weight of your servers, clear your cache, and try and see what you get for SERVERID.</p>

<p>Once you have demonstrated you can scale two app severs, scaling out horizontally is a snap. Keep running more nodes - and keep letting HAProxy know where they live!</p>

<p>Funny enough, there are more similarities between Aqueducts and HAProxy than I originally thought!</p>

<p>Some other HAProxy links:</p>

<ul>
<li><a href="http://wiki.joyent.com/wiki/display/jpc2/Load+Balancing+with+HAproxy">HAProxy on Joyent</a></li>
<li><a href="http://blog.exceliance.fr/2012/09/10/how-to-get-ssl-with-haproxy-getting-rid-of-stunnel-stud-nginx-or-pound/">HAProxy and SSL from Exceliance</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Joyent is great, but we've switched to Amazon EC2]]></title>
    <link href="http://misshula.github.com/blog/2012/11/22/joyent-is-great-but-we-have-switched-to-amazon-ec2/"/>
    <updated>2012-11-22T14:13:00-05:00</updated>
    <id>http://misshula.github.com/blog/2012/11/22/joyent-is-great-but-we-have-switched-to-amazon-ec2</id>
    <content type="html"><![CDATA[<p>At <a href="http://understoodit.com">Understoodit</a>, we’ve been hosting our node.js application on the <a href="http://joyent.com">Joyent</a> cloud using two Small 1GB (1 vCPU) SmartOS machines for over four months. It’s snappy, reliable and costs us $124.10 a month.</p>

<p>But, a few holes have forced us to hosting on Amazon EC2.</p>

<p>I’ll explain why we chose Joyent in the first place (you should explore it too) and why we’ve switched to EC2.</p>

<h3>Why choose Joyent:</h3>


<ul>
<li><strong>Node &amp; Joyent:</strong> Joyent has hired the key guys that developed Node including Ryan Lienhart Dahl (the creator a Node) and Isaac Schlueter (creator of the Node package manager and current project lead of Node) to give Node a sponsored house for it to grow. Joyent seems like the perfect place to host your node.js application.</li>
<li><strong>Performance:</strong> A recent <a href="http://mattconnolly.wordpress.com/2012/11/18/comparing-amazon-ec2-to-joyent-smartos/">post</a> by Matt Connolly shows the speed that Joyent provides. Talking with the guys from Joyent, they put a higher priority on performance and stability by using a “revamped infrastructure management platform”.</li>
<li><strong>Customer Support:</strong> Within the first two days of provisioning my Joyent machine, I was greeted by a real person. Jeffery Bliss from Joyent was extremely knowledgable and an amazing help to provide me with some awesome details. He also included options outside of Joyent to help weigh my decision. And it was free.</li>
<li><strong>Auto Scaling:</strong> If all goes well, you will have to scale your application by increasing your physical machine&#8217;s CPU speeds and RAM. With Joyent, you can do this on-the-fly without having to shutdown, provision or set up a new machine.</li>
<li><strong>Data Analytics:</strong> Joyent teamed up with <a href="http://nodefly.com">Nodefly</a> and <a href="http://newrelic.com">New Relic</a> (application monitoring systems) that provide you with real-time application data. When you sign up with Joyent, you get exclusive access to both - for free.</li>
</ul>


<p>These reasons back Joyent’s legitimacy in competing with, and in some cases, outdoing Amazon, but there were a host of reasons why we ended up deciding to switch to EC2.</p>

<h3>Why we chose Amazon EC2:</h3>


<ul>
<li><strong>It’s Cheaper:</strong> We have a staging environment that mirrors our production environment. With EC2 we can run our staging environment only when we are actually using it. In contrast, with Joyent, our machines must always be running (and billing). EC2 runs on a SAN (<a href="http://en.wikipedia.org/wiki/Storage_area_network">Storage area network</a>) in which each machine is provisioned with a “virtual hard drive” and elastic IP address. In turn, you only pay for the time you have it up and costs as little as 2 cents an hour. Also, AWS provides you with some <a href="ttp://aws.amazon.com/free/">free</a> services to get you started. It is always nice to get a taste before you pay.</li>
<li><strong>We use their other services:</strong> Not only do we use AWS for EC2 but we also use Cloudfront as our CDN and look to take advantage of a few other offerings AWS provides. We also run our databases on Heroku Postgres which is on the Amazon network.</li>
<li><strong>Multiple Locations:</strong> AWS allows you to provision VMs in Asia, North America, South America, Austrailia and Europe. We offer a custom version and being able to provision a machine closer to our clients is a big win. Dealing with a recent customer in the UK - we provided them a solution where their data was local (and not overseas) that was a huge selling point.</li>
<li><p><strong>SmartOS is not Ubuntu:</strong> Joyent gives you the option to run Ubuntu, but their “house” OS is SmartOS, which has a learning curve. With SmartOS, I came across a few annoying nuances.
   <ul>
   <li>When trying to set up Stud for our SSL connections, I needed pull a specific version forked for SmartOS (thanks <a href="https://github.com/stash">Stash</a>). I thought I was in the clear, but inevitably ran into some privileges issues that were solved by this Solaris specific command:
  <br>
  &nbsp;&nbsp;&nbsp;&nbsp;<code>pfexec crle -l /usr/local/lib -u</code></p>

<p>  Not the end of the world - but it added some frustration to my installation.
  </li>
  <li>
  I ran into another issue when trying to install the latest Haproxy with SSL (to get rid of Stud). The issue arises with the inability to install libssl-dev on SmartOS. I never found a workaround for this issue and it may have been the final deterrent for me.
  </li>
  <li>
  Another issue I found was when trying to install syslog-ng to set up external logs through <a href="http://loggly.com">Loggly</a>.
  </li></p>

<p>  These issues made the experience of working with SmartOS more frustrating and added time to setting up the VMs. On second try, I’d likely just provision a Joyent machine with Ubuntu. Joyent does provide a SmartOS <a href="http://wiki.joyent.com/wiki/display/jpc2/The+Joyent+Linux-to-SmartOS+Cheat+Sheet">cheatsheet</a>.
  <strong>Aside:</strong> An interesting <a href="http://www.infoworld.com/d/cloud-computing/review-joyent-cloud-built-speed-207561">article</a> by Peter Wayner points out the advantages of SmartOS as a enterprise server.
  </ul></p></li>
</ul>


<p>Like any decision there are tradeoffs to both. For now, it makes sense for our business to use AWS EC2 as we are not at the stage to reap the benefits that Joyent provides. I do think that Joyent is pushing the boundaries of cloud computing by providing increasingly better performance, excellent customer support, and going up against a big player in AWS with a “we are out to get you” mentality. I will definitely be keeping a close eye on Joyent and explore their options again in the future.</p>

<p>Here is some further reading comparing AWS EC2 vs Joyent:</p>

<ul>
<li><a href="http://www.joyent.com/products/joyent-cloud/aws-comparison">http://www.joyent.com/products/joyent-cloud/aws-comparison</a></li>
<li><a href="http://searchcloudcomputing.techtarget.com/video/Joyent-CEO-pokes-holes-in-Amazons-cloud">http://searchcloudcomputing.techtarget.com/video/Joyent-CEO-pokes-holes-in-Amazons-cloud</a></li>
<li><a href="http://cloud-computing.findthebest.com/compare/5-6/Amazon-EC2-vs-Joyent">http://cloud-computing.findthebest.com/compare/5-6/Amazon-EC2-vs-Joyent</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quit My Job for a Startup - What IBM Had Wrong]]></title>
    <link href="http://misshula.github.com/blog/2012/11/16/quit-my-job-for-a-startup-what-ibm-had-wrong/"/>
    <updated>2012-11-16T09:22:00-05:00</updated>
    <id>http://misshula.github.com/blog/2012/11/16/quit-my-job-for-a-startup-what-ibm-had-wrong</id>
    <content type="html"><![CDATA[<p>
I&#8217;ve named my blog Divisa C. It&#8217;s Latin for &#8220;divided 100,000&#8221;.
</p>




<p>
As of last week, I worked for IBM - which employs over 300,000 people. I quit to start <a href="http://understoodit.com" target="_blank">Understoodit</a> with just three.
</p>




<p>
Working for a large company has many pros and cons. I&#8217;ll start with the pros, so I can end with the cons freshly in my mind to strengthen the decision I have already made. These are some of the things I learned at IBM:
</p>




<h3>Pros:</h3>


<p>
<strong>There are a lot of people:</strong> A lot of people mean a lot of resources. If you don&#8217;t know something, I guarantee that someone else does. So ask.
<br>
<strong>There is a lot of money:</strong> Which means you&#8217;ll likely get some of it. Consistently.
<br>
<strong>Their business model works:</strong> Big corporations are not in business to lose money. They&#8217;ve been around the block and know how to make it. Their success is driven from people who are making good business decisions. Be aware of the smart decisions that are made and try to fit them into your own life.
<br>
<strong>People know your company:</strong> When someone asks &#8220;what do you do?&#8221; you don&#8217;t have to fiddle around with fluffing up your day job. You can say, &#8220;I work for IBM&#8221;. People have heard of IBM. Then they will acknowledge with a smile, and you can now focus back on them. It&#8217;s incredible how easy conversations work when you are simple.
<br>
<strong>You don&#8217;t actually have to work that hard:</strong> You can - and you should. But, you don&#8217;t have to. The culture in larger organizations are convoluted. A culture mirrors the work it breeds and at IBM you could get away with doing less.
<br>
<strong>Free pens and stuff.</strong>
<br>
</p>




<h3>Cons:</h3>


<p>
<strong>THERE ARE A LOT OF PEOPLE:</strong> Doing the simple things are hard. There are rules, guidelines and policies. If you need a mouse - you&#8217;ll likely need it to be signed off by your manager. And your manager&#8217;s manager. And your manager&#8217;s manager&#8217;s manager (who you&#8217;ve never met - but sits thirty feet away). You get the point.
<br>
<strong>You don&#8217;t actually WANT to work that hard:</strong> If you give a 5/10 or a 10/10, you&#8217;ll likely get a 7/10. I like to work hard - but people don&#8217;t recognize the work you&#8217;ve actually put in. Managers typically reward results when they should be rewarding effort. Effort goes unnoticed.
<br>
<strong>Culture:</strong> For someone young (I&#8217;m 26), you want to be around people like yourself. You want to work with people you&#8217;d be friends with. I don&#8217;t hang out with people over 40 that often, but I did at work. It makes for a very tangled culture with many faces. Ask 50 people what the culture is like, and you&#8217;ll get 50 different answers.
<br>
<strong>You don&#8217;t say hi to everyone:</strong> No one will look at you as you walk in the building. A smirk is the only thing you&#8217;ll get from an unknown colleague. A big company feels like a big city street. It&#8217;s unfriendly.
<br>
<strong>People don&#8217;t care:</strong> There is a diffusion of responsibility when it comes to anything. Especially when trying to develop young and eager talent. Rather then set them up for success, better drown them in boredom and uncertainty. But it&#8217;s okay, because we are giving them a pay check and dental coverage - right? Wrong.
</p>




<p>
When I first wrote this post, I thought that working for a big company had more pros than cons. But I&#8217;ve been working full-time on a startup for only a week and I&#8217;m already more enthusiastic about my day-to-day life. I&#8217;ve been very fortunate to work for a company that put up with me while I learned the ropes and I never had to worry about them NOT paying me. The fact they even paid me at all still somewhat baffles me.
</p>




<p>
But it&#8217;s time for me to be the boss. Make decisions and do work that has some greater social value. I hope you keep reading and I have something to talk about.
</p>

]]></content>
  </entry>
  
</feed>
